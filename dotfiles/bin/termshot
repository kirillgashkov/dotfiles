#!/bin/sh

usage() {
    cat << EOF
Usage: $0 [options] <input>

Arguments:
  <input>                                   Input file [required].

Options:
  --width                                   Set the width of the terminal window [default: 80].
  --min-width                               Set the minimum width of the terminal window (not supported).
  --max-width                               Set the maximum width of the terminal window (not supported).
  --height                                  Set the height of the terminal window [default: auto].
  --min-height                              Set the minimum height of the terminal window (not supported).
  --max-height                              Set the maximum height of the terminal window [default: 33].
  -i, --interactive / -n, --no-interactive  Enable/disable interaction with the terminal before taking the screenshot [default: false].
  -o, --output                              Output file (.png) [required].
  -h, --help                                Show this message.

Examples:
  $0 output.txt -o screenshot.png
  $0 --height 33 output.txt -o screenshot.png
  $0 <(tmux capture-pane -p -S - -E - -e) -o screenshot.png
EOF
}

width=80
# min_width=
# max_width=
height="auto"
# min_height=
max_height=33
interactive=0
output_file=""

while [ "$#" -gt 0 ]; do
    case "$1" in
        --width)
            width="$2"
            shift 2
            ;;
        --min-width)
            echo >&2 "$(tput bold)$(tput setaf 1)Error:$(tput sgr0) Option '--min-width' not supported."
            shift 2
            ;;
        --max-width)
            echo >&2 "$(tput bold)$(tput setaf 1)Error:$(tput sgr0) Option '--max-width' not supported."
            shift 2
            ;;
        --height)
            height="$2"
            shift 2
            ;;
        --min-height)
            echo >&2 "$(tput bold)$(tput setaf 1)Error:$(tput sgr0) Option '--min-height' not supported."
            shift 2
            ;;
        --max-height)
            max_height="$2"
            shift 2
            ;;
        -i|--interactive)
            interactive=1
            shift 1
            ;;
        -n|--no-interactive)
            interactive=0
            shift 1
            ;;
        -o|--output)
            output_file="$2"
            shift 2
            ;;
        -h|--help)
            usage
            exit 0
            ;;
        *)
            echo >&2 "$(tput bold)$(tput setaf 1)Error:$(tput sgr0) Unknown option: $1"
            usage >&2
            exit 1
            ;;
    esac
done

termshot() (
    local output_file="$1"

    local terminal_content_file="$(mktemp -t termshot)"
    cat > "$terminal_content_file"
    trap 'rm -f -- "$terminal_content_file"' EXIT

    local terminal_session_name="$(printf "%s" "$terminal_content_file" | base64)"

    local terminal_content_height="$(cat "$terminal_content_file" | ansifilter --wrap 80 | grep -c ^)"
    if [[ "$terminal_content_height" -lt "$TERMSHOT_MAX_HEIGHT" ]]; then
        local terminal_window_height="$terminal_content_height"
    else
        local terminal_window_height="$TERMSHOT_MAX_HEIGHT"
    fi

    alacritty \
        --config-file "$XDG_CONFIG_HOME/termshot/alacritty.yml" \
        --option window.dimensions.columns="$TERMSHOT_WIDTH" \
        --option window.dimensions.lines="$terminal_window_height" \
        --hold \
        --command "$(command -v tmux)" -f "$XDG_CONFIG_HOME/termshot/tmux.conf" -L termshot new-session -s "$terminal_session_name" cat "$terminal_content_file" &
    local terminal_pid="$!"
    trap 'rm -f -- "$terminal_content_file"; kill -- "$terminal_pid"' EXIT

    terminal_window_id="$(hs -A -q -t 10 <<EOF
local waitDuration = 5000000 -- 5 seconds
local waitInterval = 100000 -- 0.1 seconds
local app
local window

repeat
    app = app or hs.application.applicationForPID($terminal_pid)

    if app then
        window = app:mainWindow()

        if window then
            break
        end
    end

    hs.timer.usleep(hs.math.min(waitDuration, waitInterval))
    waitDuration = waitDuration - waitInterval
until waitDuration <= 0

if not app then
    error("Couldn't find application for PID '$terminal_pid'.")
end

if not window then
    error("Couldn't find window for PID '$terminal_pid'.")
end

return window:id()
EOF
    )"

    if [[ "$?" -ne 0 ]]; then
        echo >&2 "$(tput bold)$(tput setaf 1)Error:$(tput sgr0) Failed to find terminal window."
        exit 1
    fi

    if [[ "$(tmux -L termshot display-message -p -t "=$terminal_session_name:0.0" "#{history_size}")" -ne 0 ]]; then
        echo >&2 "$(tput bold)$(tput setaf 1)Error:$(tput sgr0) Terminal history is not empty."
        exit 1
    fi

    screencapture -x -o -l "$terminal_window_id" "$output_file"
)

termshot "$@"

#!/usr/bin/env zsh

usage="$(cat << EOF
Usage: $(basename "$0") [options] <input>

Arguments:
  <input>                                   Input file [required].

Options:
  -W, --width <width>                       Set the width of the terminal window [integer] [default: 80].
  --min-width <min-width>                   Set the minimum width of the terminal window [integer] [not supported].
  --max-width <max-width>                   Set the maximum width of the terminal window [integer] [not supported].
  -H, --height <height>                     Set the height of the terminal window [integer | "auto"] [default: auto].
  --min-height <min-height>                 Set the minimum height of the terminal window [integer] [not supported].
  --max-height <max-height>                 Set the maximum height of the terminal window [integer] [default: 33].
  -i, --interactive / -n, --no-interactive  Enable/disable interaction with the terminal before taking the screenshot [default: false].
  -o, --output <output-file>                Output file (.png) [file] [required].
  -h, --help                                Show this message.

Examples:
  $(basename "$0") output.txt -o screenshot.png
  $(basename "$0") --height 33 output.txt -o screenshot.png
  $(basename "$0") <(tmux capture-pane -p -S - -E - -e) -o screenshot.png
EOF
)"

width=80
# min_width=
# max_width=
height="auto"
# min_height=
max_height=33
interactive=0
output_file=

positional=()

while [[ "$#" -gt 0 ]]; do
    case "$1" in
        -W|--width)
            width="$2"
            shift 2
            ;;
        --min-width)
            echo >&2 "$(tput bold)$(tput setaf 1)Error:$(tput sgr0) Option '--min-width' not supported."
            exit 1
            ;;
        --max-width)
            echo >&2 "$(tput bold)$(tput setaf 1)Error:$(tput sgr0) Option '--max-width' not supported."
            exit 1
            ;;
        -H|--height)
            height="$2"
            shift 2
            ;;
        --min-height)
            echo >&2 "$(tput bold)$(tput setaf 1)Error:$(tput sgr0) Option '--min-height' not supported."
            exit 1
            ;;
        --max-height)
            max_height="$2"
            shift 2
            ;;
        -i|--interactive)
            interactive=1
            shift 1
            ;;
        -n|--no-interactive)
            interactive=0
            shift 1
            ;;
        -o|--output)
            output_file="$2"
            shift 2
            ;;
        -h|--help)
            printf "%s" "$usage"
            exit 0
            ;;
        -*)
            echo >&2 "$(tput bold)$(tput setaf 1)Error:$(tput sgr0) Unknown option: $1"
            exit 1
            ;;
        *)
            positional+=("$1")
            shift 1
            ;;
    esac
done

if [[ -z "$output_file" ]]; then
    echo >&2 "$(tput bold)$(tput setaf 1)Error:$(tput sgr0) Missing required option '--output'."
    exit 1
fi

if [[ "${#positional[@]}" -ne 1 ]]; then
    echo >&2 "$(tput bold)$(tput setaf 1)Error:$(tput sgr0) Expected exactly 1 positional argument, got ${#positional[@]}."
    exit 1
fi

input_file="${positional[1]}"


main() {
    content_file="$(mktemp -t termshot)"
    cat "$input_file" > "$content_file"
    trap 'rm -f -- "$content_file"' EXIT

    session_name="$(printf "%s" "$content_file" | base64)"
    content_height="$(cat "$content_file" | ansifilter --wrap 80 | grep -c ^)"

    window_width="$width"
    window_height=
    if [[ "$height" == "auto" && "$content_height" -le "$max_height" ]]; then
        window_height="$content_height"
    else
        window_height="$max_height"
    fi

    alacritty \
        --config-file "${XDG_CONFIG_HOME:-$HOME/.config}/termshot/alacritty.yml" \
        --option window.dimensions.columns="$window_width" \
        --option window.dimensions.lines="$window_height" \
        --command \
            "$(command -v tmux)" \
            -f "$XDG_CONFIG_HOME/termshot/tmux.conf" \
            -L termshot \
                new-session \
                -s "$session_name" \
                    cat "$content_file" \
    &
    alacritty_pid="$!"
    trap 'rm -f -- "$content_file"; kill -- "$alacritty_pid"' EXIT

    window_id="$(hs -A -q -t 10 << EOF
local waitDuration = 5000000 -- 5 seconds
local waitInterval = 100000 -- 0.1 seconds
local app
local window

repeat
    app = app or hs.application.applicationForPID($alacritty_pid)

    if app then
        window = app:mainWindow()

        if window then
            break
        end
    end

    hs.timer.usleep(hs.math.min(waitDuration, waitInterval))
    waitDuration = waitDuration - waitInterval
until waitDuration <= 0

if not app then
    error("Couldn't find application for PID '$alacritty_pid'.")
end

if not window then
    error("Couldn't find window for PID '$alacritty_pid'.")
end

return window:id()
EOF
    )"

    if [[ "$?" -ne 0 ]]; then
        echo >&2 "$(tput bold)$(tput setaf 1)Error:$(tput sgr0) Failed to find terminal window."
        exit 1
    fi

    if [[ "$(tmux -L termshot display-message -t "=$session_name:0.0" -p "#{history_size}")" -ne 0 ]]; then
        echo >&2 "$(tput bold)$(tput setaf 3)Warning:$(tput sgr0) Terminal content is too large to fit in a single screenshot."
        tmux -L termshot copy-mode -t "=$session_name:0.0" -H ";" send-keys -t "=$session_name:0.0" -X history-top
    fi

    if [[ "$interactive" -eq 1 ]]; then
        echo >&2 "Interactive mode enabled.\nPress any key to continue..."
        read -n 1 -s
    fi

    screencapture -x -o -l "$window_id" "$output_file"
}

main
